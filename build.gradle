import me.modmuss50.mpp.ReleaseType

buildscript {
	dependencies {
		classpath 'org.parchmentmc:librarian:1.+'
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
	}
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

ext {
	releaseTag = providers.environmentVariable("TAG").orElse("").get()
	isAlpha = ext.releaseTag.contains("alpha")
	isBeta = ext.releaseTag.contains("beta")
}

// All jar files from this folder will be added automatically as runtime-only mod dependencies
def extraModsDir = "extra-mods-${minecraft_version}"

repositories {
	mavenLocal()
	mavenCentral()
	flatDir {
		name "extra-mods"
		dir file(extraModsDir)
		content {
			includeGroup "extra-mods"
		}
	}
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name 'CC: Tweaked'
		url 'https://squiddev.cc/maven/'
		content {
			includeGroup("cc.tweaked")
		}
	}
	maven {
		name 'Crafttweaker/Patchouli/Botania/Immersive Engineering/Gamestages'
		url 'https://maven.blamejared.com/'
		content {
			includeGroup "vazkii.patchouli"
			includeGroup "vazkii.botania"
			includeGroup "mezz.jei"
			includeGroup "blusunrize.immersiveengineering"
			includeGroup "com.blamejared.crafttweaker"
			includeGroup "net.darkhax.gamestages"
			includeGroup "net.darkhax.bookshelf"
			includeGroup "org.openzen.zencode"
		}
	}
	maven {
		name = "OctoStudios"
		url = uri("https://maven.octo-studios.com/releases")
	}
	maven {
		name "K-4u Mod maven"
		url "https://modmaven.dev/"
		content {
			includeGroup "com.simibubi.create"
			includeGroup "mekanism"
			includeGroup "mcjty.theoneprobe"
		}
	}
	maven {
		name "FTB Maven"
		url "https://maven.ftb.dev/releases/"
		content {
			includeGroup "dev.ftb.mods"
		}
	}
}

base {
    archivesName = "${archive_base_name}-${mod_version}+mc${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets {
	api {
		compileClasspath = main.compileClasspath
		resources.srcDirs = []
	}
	main {
		compileClasspath += api.output
		runtimeClasspath += api.output
		resources {
			srcDir 'src/generated/resources'
		}
	}
	test {
		resources.srcDirs = []
		compileClasspath += api.output
		runtimeClasspath += api.output
	}
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.api
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		jvmArguments.addAll('-Xmx4G')
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
	apiImplementation "net.neoforged:neoforge:${neo_version}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.2"

	implementation("mcjty.theoneprobe:theoneprobe:${top_version}") {
		exclude group: "net.minecraftforge", module: "forge"
	}

	compileOnly("mezz.jei:jei-1.21.1-common-api:${jei_version}")
	compileOnly("mezz.jei:jei-1.21.1-neoforge-api:${jei_version}")
	runtimeOnly("mezz.jei:jei-1.21.1-common:${jei_version}")
	runtimeOnly("mezz.jei:jei-1.21.1-neoforge:${jei_version}")

	compileOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}:api")
	runtimeOnly("top.theillusivec4.curios:curios-neoforge:${curios_version}")

	compileOnly("vazkii.botania:Botania:${botania_version}:api")
	//runtimeOnly("vazkii.botania:Botania:${botania_version}")

	compileOnly("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly("vazkii.patchouli:Patchouli:${patchouli_version}")

	implementation("curse.maven:cc-tweaked-282001:${cc_tweaked_curse_id}")
//	compileOnly("cc.tweaked:cc-tweaked-1.21-forge-api:${cc_tweaked_version}")
//	runtimeOnly("cc.tweaked:cc-tweaked-1.21-forge:${cc_tweaked_version}")

	compileOnly("dev.ftb.mods:ftb-filter-system-neoforge:${ffs_version}") { transitive = false }

	compileOnly("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")

	compileOnly("mekanism:Mekanism:${mekanism_version}:api")
	runtimeOnly("mekanism:Mekanism:${mekanism_version}")

	compileOnly("com.simibubi.create:create-1.20.1:${create_version}:slim") { transitive = false }

	implementation("curse.maven:jade-324717:${jade_curse_id}")

	compileOnly("com.blamejared.crafttweaker:CraftTweaker-neoforge-1.21.1:${crafttweaker_version}")

	compileOnly("curse.maven:cofh_core-69162:${cofh_core_curse_id}")
	compileOnly("curse.maven:thermal_cultivation-271835:${thermal_cultivation_curse_id}")
	compileOnly("curse.maven:thermal_expansion-69163:${thermal_expansion_curse_id}")
	compileOnly("curse.maven:thermal_foundation-222880:${thermal_foundation_curse_id}")
	compileOnly("curse.maven:thermal_innovation-291737:${thermal_innovation_curse_id}")
	compileOnly("curse.maven:thermal_locomotion-406959:${thermal_locomotion_curse_id}")

	compileOnly("net.darkhax.gamestages:GameStages-Forge-1.20.1:${gamestages_version}")

	// Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		runtimeOnly("extra-mods:$artifactId:$version")
	}
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar {
	from sourceSets.api.output
}

javadoc {
	source = [sourceSets.main.allJava, sourceSets.api.allJava]
	// prevent java 8's strict doclint for javadocs from failing builds
	options.addStringOption('Xdoclint:none', '-quiet')
	(options as StandardJavadocDocletOptions)
			.tags("apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:")
}

def snapExt = ext.releaseTag == "" ? "-SNAPSHOT" : ""
publishing {
    publications {
        register('mavenJava', MavenPublication) {
			artifactId = archive_base_name
			groupId = mod_group_id
			version = "${mod_version}+mc${minecraft_version}${snapExt}"
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
        if (System.getenv("MODMAVEN_USER") != null) {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def releaseType = ext.isAlpha ? ReleaseType.ALPHA : (ext.isBeta ? ReleaseType.BETA : ReleaseType.STABLE)
publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").orElse("dryrun")
    version = mod_version
    type = releaseType
    file = jar.archiveFile
    displayName = "${mod_name} ${mod_version} MC-${minecraft_version}"
    modLoaders.add("neoforge")

    curseforge {
        projectId = curse_project_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)
        projectSlug = "pneumaticcraft-repressurized"
        announcementTitle = "Download from Curseforge"
        optional {
            slug = "patchouli"
            slug = "ctm"
        }
    }

    modrinth {
        projectId = modrinth_project_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)
        announcementTitle = "Download from Modrinth"
        optional {
            id = "nU0bVIaL"
        }
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK").orElse("dryrun")
		content = changelog.map { "# ${mod_name} v${mod_version} for MC ${minecraft_version} has been released! \n" + it}
//        setPlatforms(platforms.curseforge, platforms.modrinth)
    }
}

