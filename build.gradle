import me.modmuss50.mpp.ReleaseType

buildscript {
	dependencies {
		classpath 'org.parchmentmc:librarian:1.+'
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
		classpath 'org.spongepowered:mixingradle:0.7.+'
	}
}

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.5.1"
	id('net.neoforged.gradle') version '[6.0.13, 6.2)'
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: "com.jfrog.artifactory"
apply plugin: "org.spongepowered.mixin"

ext.releaseTag = System.getenv('TAG') ?: ""
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")

def semver = "${mod_version_massive}.${mod_version_major}.${mod_version_minor}"
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")

// these two are required for the java plugin to generate jar files with a version
version = "${semver}+mc${project.mc_version}"
group = 'me.desht.pneumaticcraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "pneumaticcraft-repressurized"

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${project.mc_version}"

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources {
			srcDir 'src/generated/resources'
		}
		ext.refMap = "mixins.pneumaticcraft.refmap.json"
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
//	apiImplementation.extendsFrom(implementation)
//	apiRuntimeOnly.extendsFrom(runtimeOnly)
	apiImplementation.extendsFrom(minecraft)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
	mavenCentral()
	flatDir {
		name "extra-mods"
		dir file(extraModsDir)
		content {
			includeGroup "extra-mods"
		}
	}
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name 'CC: Tweaked'
		url 'https://squiddev.cc/maven/'
		content {
			includeGroup "org.squiddev"
		}
	}
	maven {
		name 'Crafttweaker/Patchouli/Botania/Immersive Engineering/Gamestages'
		url 'https://maven.blamejared.com/'
		content {
			includeGroup "vazkii.patchouli"
			includeGroup "vazkii.botania"
			includeGroup "mezz.jei"
			includeGroup "blusunrize.immersiveengineering"
			includeGroup "com.blamejared.crafttweaker"
			includeGroup "net.darkhax.gamestages"
			includeGroup "net.darkhax.bookshelf"
			includeGroup "org.openzen.zencode"
		}
	}
	maven {
		name 'Curios'
		url "https://maven.theillusivec4.top/"
		content {
			includeGroup "top.theillusivec4.curios"
		}
	}
	maven {
		name "K-4u Mod maven"
		url "https://modmaven.dev/"
		content {
			includeGroup "com.jozufozu.flywheel"
			includeGroup "com.simibubi.create"
			includeGroup "com.tterrag.registrate"
			includeGroup "mekanism"
			includeGroup "mcjty.theoneprobe"
		}
	}
}

dependencies {
	minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.2"

	implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
		exclude group: "net.minecraftforge", module: "forge"
	}
	// compile against the JEI API but do not include it at runtime
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
	// at runtime, use the full JEI
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
//	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
	implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
	compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
	//runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}-FORGE")
	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
	compileOnly fg.deobf("org.squiddev:cc-tweaked-1.19.2:${cc_tweaked_version}")
	implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
	compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:api")
	runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
	//runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
	implementation fg.deobf("com.simibubi.create:create-1.20.1:${create_version}:slim") { transitive = false }
	implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.20.1:${flywheel_version}")
	implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
//	implementation fg.deobf("curse.maven:create-328085:${create_curse_id}")
	implementation fg.deobf("curse.maven:jade-324717:${jade_curse_id}")
	compileOnly fg.deobf("curse.maven:cofh_core-69162:${cofh_core_curse_id}")
	compileOnly fg.deobf("curse.maven:thermal_cultivation-271835:${thermal_cultivation_curse_id}")
	compileOnly fg.deobf("curse.maven:thermal_expansion-69163:${thermal_expansion_curse_id}")
	compileOnly fg.deobf("curse.maven:thermal_foundation-222880:${thermal_foundation_curse_id}")
	compileOnly fg.deobf("curse.maven:thermal_innovation-291737:${thermal_innovation_curse_id}")
	compileOnly fg.deobf("curse.maven:thermal_locomotion-406959:${thermal_locomotion_curse_id}")

	compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-1.20.1:${crafttweaker_version}")
	compileOnly fg.deobf("net.darkhax.gamestages:GameStages-Forge-1.20.1:${gamestages_version}")

	//compileOnly fg.deobf("appeng:appliedenergistics2:${ae2_version}:api")
	//runtimeOnly fg.deobf("appeng:appliedenergistics2:${ae2_version}")
	//compileOnly fg.deobf("team.chisel.ctm:CTM:MC1.16.1-${ctm_version}")
	//runtimeOnly fg.deobf("team.chisel.ctm:CTM:MC1.16.1-${ctm_version}")

	// Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
	}

//    compileOnly "li.cil.oc:OpenComputers:MC1.12.2-${oc_version}:api"
//    compileOnly "net.industrial-craft:industrialcraft-2:2.8.27-ex112:api"
//    compileOnly "thaumcraft:Thaumcraft:${thaumcraft_version}"
//    compileOnly "team.chisel.ctm:CTM:${ctm_version}:api"
}

minecraft {
	mappings channel: 'parchment', version: "${project.mappings_version}-${project.mc_version}"

	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			property 'forge.logging.console.level', 'debug'
			workingDirectory file('run')
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			ideaModule "${project.name}.main"
			mods {
				pneumaticcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
			}
		}
		server {
			property 'forge.logging.console.level', 'debug'
			workingDirectory file('run')
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			ideaModule "${project.name}.main"
			mods {
				pneumaticcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
			}
		}
		data {
			property 'forge.logging.console.level', 'debug'
			property 'fml.earlyprogresswindow', 'false'
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			workingDirectory file('run')
			ideaModule "${project.name}.main"
			args '--mod', 'pneumaticcraft', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
			mods {
				pneumaticcraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
			}
		}
	}
}

mixin {
	// Refmaps for each SourceSet
	add sourceSets.main, 'mixins.pneumaticcraft.refmap.json'

	// Configs to add to runs and jars
	config 'mixins.pneumaticcraft.json'

	// Specify options for dev run configs
	debug.verbose = true
	debug.export = true
	dumpTargetOnFailure = true

	// Options for the Annotation Processor
	quiet
}

def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version, 'mc_version': mc_version, 'mc_version_range': minecraft_version_range, 'forge_version_range': forge_version_range
	}
	it.into "$buildDir/resources/main/"
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

classes.configure {
	dependsOn(replaceResources)
}


task getChangelogProperty(type: Exec) {
	standardOutput = new ByteArrayOutputStream()
	commandLine 'bash', './scripts/extract_changes.sh', "${semver}"
	doLast {
		ext.changelog = standardOutput.toString()
	}
}

jar {
	from sourceSets.main.output
	from sourceSets.api.output

	manifest.attributes([
			'FMLAT': 'accesstransformer.cfg',
			"Specification-Title": "PneumaticCraft: Repressurized",
			"Specification-Vendor": "desht",
			"Specification-Version": "${semver}",
			"Implementation-Title": project.name,
			"Implementation-Version": "${project.version}",
			"Implementation-Vendor" :"desht",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
			'MixinConfigs': 'mixins.pneumaticcraft.json',
			'FMLCorePluginContainsFMLMod': 'true',
	])

	finalizedBy 'reobfJar'
}


task sourcesJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('sources')
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar, dependsOn: apiClasses) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('api')
	from sourceSets.api.output
	afterEvaluate { finalizedBy reobfApiJar }
}

task deobfJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	archiveClassifier.set('deobf')
	from sourceSets.main.output
	from sourceSets.api.output
}

artifacts {
	archives sourcesJar
	archives apiJar
	archives deobfJar
}

reobf {
	apiJar { libraries.from(sourceSets.api.compileClasspath) }
	jar { libraries.from(sourceSets.main.compileClasspath) }
}

task reobf {
	dependsOn reobfJar
	dependsOn reobfApiJar
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// with thanks to AE2
def mavenVer = ext.releaseTag == "" ? "${version}-SNAPSHOT" : "${version}"
publishing {
	publications {
		mavenCommon(MavenPublication) {
			artifactId = rootProject.archivesBaseName
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
	if (System.getenv("MODMAVEN_USER") != null) {
		publications {
			maven(MavenPublication) {
				groupId = project.group
				artifactId = project.archivesBaseName
				version = mavenVer

				// ForgeGradle will generate wild dependency definitions, see https://github.com/MinecraftForge/ForgeGradle/issues/584
				// Since we don't actually depend on anything, just remove the entire node.
				pom.withXml {
					asNode().remove(asNode().dependencies)
				}

				from components.java
				artifact sourcesJar
				artifact apiJar
			}
		}
		repositories {
			maven {
				name = "modmaven"
				credentials {
					username System.getenv("MODMAVEN_USER")
					password System.getenv("MODMAVEN_PASSWORD")
				}
				url = "https://modmaven.dev/artifactory/local-releases/"
			}
		}
	}
}

idea {
	module {
		for (String exclude in ['run', 'out', 'logs']) {
			excludeDirs += file(exclude)
		}
	}
}

Closure<ReleaseType> getReleaseType = { type ->
	switch(type) {
		case "alpha": return ReleaseType.ALPHA
		case "beta": return ReleaseType.BETA
		default: return ReleaseType.STABLE
	}
}

publishMods {
	dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
	changelog = providers.environmentVariable("CHANGELOG").orElse("dryrun")
	version = semver
	type = getReleaseType(relType)
	file = jar.archiveFile
	displayName = file.map { it.asFile.name }
	modLoaders.add("forge")
	modLoaders.add("neoforge")

	curseforge {
		projectId = curse_project_id
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(mc_version)
		projectSlug = "pneumaticcraft-repressurized"
		announcementTitle = "Download from Curseforge"
		requires {
			slug = "patchouli"
		}
	}

	modrinth {
		projectId = modrinth_project_id
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(mc_version)
		announcementTitle = "Download from Modrinth"
		requires {
			id = "nU0bVIaL"
		}
	}

	discord {
		webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK").orElse("dryrun")
		content = changelog.map { "# Version ${semver} of PneumaticCraft: Repressurized has been released! \n" + it}
//        setPlatforms(platforms.curseforge, platforms.modrinth)
	}
}

